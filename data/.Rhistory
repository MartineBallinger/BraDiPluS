allPars_median<-apply(theDrug_data,2,median)
RMSE_median<-allPars_median[length(allPars_median)]
allPars_median<-allPars_median[-length(allPars_median)]
allData<-data.frame(drug=theDrug, link=names(allPars_median), effectSize=allPars_median, LOOCVrmse=RMSE_median)
return(allData)
}))
plot(models$effectSize, models_ahh$effectSize)
?rnorm
x <-abs(rnorm(n = 200, sd = 0.01, mean = 0))
y<-x
plot(x,y)
x <-sort(abs(rnorm(n = 1000, sd = 0.01, mean = 0)))
x <-sort(abs(rnorm(n = 1000, sd = 0.01, mean = 0)))
y<-c(x[1:250]+rnorm(n = 250, mean = 0, sd = 0.0001),
x[251:500]+rnorm(n = 250, mean = 0, sd = 0.0001),
x[501:750]+rnorm(n = 250, mean = 0, sd = 0.0001),
x[751:1000]+rnorm(n = 250, mean = 0, sd = 0.0001))
plot(x,y)
x <-sort(abs(rnorm(n = 1000, sd = 0.01, mean = 0)))
y<-c(x[1:250]+rnorm(n = 250, mean = 0, sd = 0.001),
x[251:500]+rnorm(n = 250, mean = 0, sd = 0.01),
x[501:750]+rnorm(n = 250, mean = 0, sd = 0.1),
x[751:1000]+rnorm(n = 250, mean = 0, sd = 1))
plot(x,y)
x <-sort(abs(rnorm(n = 1000, sd = 0.01, mean = 0)))
y<-c(x[1:250]+rnorm(n = 250, mean = 0, sd = 0.00001),
x[251:500]+rnorm(n = 250, mean = 0, sd = 0.0001),
x[501:750]+rnorm(n = 250, mean = 0, sd = 0.001),
x[751:1000]+rnorm(n = 250, mean = 0, sd = 0.01))
plot(x,y)
x <-sort(abs(rnorm(n = 1000, sd = 0.01, mean = 0)))
y<-c(x[1:250]+rnorm(n = 250, mean = 0, sd = 0.0008),
x[251:500]+rnorm(n = 250, mean = 0, sd = 0.001),
x[501:750]+rnorm(n = 250, mean = 0, sd = 0.002),
x[751:1000]+rnorm(n = 250, mean = 0, sd = 0.005))
plot(x,y)
plot(x,y, pch=20)
x <-sort(abs(rnorm(n = 1000, sd = 0.008, mean = 0)))
y<-c(x[1:250]+rnorm(n = 250, mean = 0, sd = 0.0008),
x[251:500]+rnorm(n = 250, mean = 0, sd = 0.001),
x[501:750]+rnorm(n = 250, mean = 0, sd = 0.002),
x[751:1000]+rnorm(n = 250, mean = 0, sd = 0.005))
plot(x,y, pch=20)
abline(a=0, b=1)
source('~/.active-rstudio-document', echo=TRUE)
abline(a=0, b=1, col="blue") # this will draw the 45 degree angle line (in )
reg1 <- lm(write~read)
reg1 <- lm(y~x)
abline(reg1)
# similar to your real ones
x <-sort(abs(rnorm(n = 1000, sd = 0.008, mean = 0)))
y<-c(x[1:250]+rnorm(n = 250, mean = 0, sd = 0.0008),
x[251:500]+rnorm(n = 250, mean = 0.001, sd = 0.001),
x[501:750]+rnorm(n = 250, mean = 0.002, sd = 0.002),
x[751:1000]+rnorm(n = 250, mean = 0.003, sd = 0.005))
# let's x and y be your data in the x and y axes
plot(x,y, pch=20)
abline(a=0, b=1, col="blue") # this will draw the 45 degree angle line (will be shown in blue)
reg1 <- lm(y~x)
abline(reg1)
reg1 <- lm(y~x) # this computes the linear regression of you data
abline(reg1, col="green") # and plot the regression line (in green)
reg1
coef(reg1)
ix_pop1<-which(y>x)
ix_pop1<-which(y>x)
col="black"
col[ix_pop1]<-"dodgerblue3"
plot(x,y,col)
ix_pop1<-which(y>x)
col=rep("black", length(x))
col[ix_pop1]<-"dodgerblue3"
plot(x,y,col)
plot(x,y,col=col)
ix_pop1<-which(y>x)
col=rep("black", length(x))
col[ix_pop1]<-"dodgerblue3"
x <-sort(abs(rnorm(n = 1000, sd = 0.008, mean = 0)))
y<-c(x[1:250]+rnorm(n = 250, mean = 0, sd = 0.0008),
x[251:500]+rnorm(n = 250, mean = 0.001, sd = 0.001),
x[501:750]+rnorm(n = 250, mean = 0.002, sd = 0.002),
x[751:1000]+rnorm(n = 250, mean = 0.003, sd = 0.005))
# let's x and y be your data in the x and y axes
plot(x,y, pch=20)
#####
## here below how to draw a diagonal line:
abline(a=0, b=1, col="blue") # this will draw the 45 degree angle line (will be shown in blue)
reg1 <- lm(y~x) # this computes the linear regression of you data
abline(reg1, col="green") # and plot the regression line (in green)
ix_pop1<-which(y<x)
col=rep("black", length(x))
col[ix_pop1]<-"dodgerblue3"
poits(x,y,col=col, pch=20)
points(x,y,col=col, pch=20)
plot(x,y, pch=20)
ix_pop1<-which(y<x) # if you whant the population above just change to y>x instead of y<x
# this gives you the index of the points that follow your rule
col=rep("black", length(x))
col[ix_pop1]<-"dodgerblue3"
points(x[ix_pop1],y[ix_pop1],col=col, pch=20, col="dodgerblue3") # the selected points will be plotted in light blue
points(x[ix_pop1],y[ix_pop1], pch=20, col="dodgerblue3") # the selected points will be plotted in light blue
x_m<-mean(x[ix_pop1]) # or median(x[ix_pop1]) for the median
y_m<-mean(y[ix_pop1])# or median(y[ix_pop1]) for the median
point(x_m, y_m, pch=2, col="dodgerblue3")
points(x_m, y_m, pch=2, col="dodgerblue3")
a_reg<-coef(reg1)[1] #this is to derive the coefficient a of the regression line
b_reg<-coef(reg1)[1] #and this is to derive the coefficient b of the regression line
a_reg<-coef(reg1)[1] #this is to derive the coefficient a of the regression line (computed before)
b_reg<-coef(reg1)[1] #and this is to derive the coefficient b of the regression line (computed before)
# so now regression line is y=a_reg+b_reg*x
ix_pop1<-which(y>(a_reg+b_reg*x)) # if you whant the population above just change to y>x instead of y<x
# don't look at this part of code, it's just to generate some fake data
# similar to your real ones
x <-sort(abs(rnorm(n = 1000, sd = 0.008, mean = 0)))
y<-c(x[1:250]+rnorm(n = 250, mean = 0, sd = 0.0008),
x[251:500]+rnorm(n = 250, mean = 0.001, sd = 0.001),
x[501:750]+rnorm(n = 250, mean = 0.002, sd = 0.002),
x[751:1000]+rnorm(n = 250, mean = 0.003, sd = 0.005))
# let's x and y be your data in the x and y axes
plot(x,y, pch=20)
#####
## here below how to draw a diagonal line:
abline(a=0, b=1, col="blue") # this will draw the 45 degree angle line (will be shown in blue)
# the formula of the plotted line is y=a+bx so a is intercept and b the slope
reg1 <- lm(y~x) # this computes the linear regression of you data
abline(reg1, col="darkgreen") # and plot the regression line (in green)
#####
## here below how to compute mean (or median) of a gated population
# example1: I will call pop1 the population below the blue diagonal line
ix_pop1<-which(y<x) # if you whant the population above just change to y>x instead of y<x
# this gives you the index of the points that follow your rule
points(x[ix_pop1],y[ix_pop1], pch=20, col="dodgerblue3") # the selected points will be plotted in light blue
# to compute mean (or median) of the selected point
x_m<-mean(x[ix_pop1]) # or median(x[ix_pop1]) for the median
y_m<-mean(y[ix_pop1])# or median(y[ix_pop1]) for the median
a_reg<-coef(reg1)[1] #this is to derive the coefficient a of the regression line (computed before)
b_reg<-coef(reg1)[1] #and this is to derive the coefficient b of the regression line (computed before)
ix_pop2<-which(y>(a_reg+b_reg*x)) # if you whant the population above just change to y>x instead of y<x
points(x[ix_pop2],y[ix_pop2], pch=20, col="darkolivegreen3") # the selected points will be plotted in light blue
a_reg<-coef(reg1)[1]
b_reg<-coef(reg1)[1]
a_reg
b_reg
abline(a=0, b=1, col="blue") # this will draw the 45 degree angle line (will be shown in blue)
# the formula of the plotted line is y=a+bx so a is intercept and b the slope
reg1 <- lm(y~x) # this computes the linear regression of you data
abline(reg1, col="darkgreen") # and plot the regression line (in green)
plot(x,y, pch=20)
#####
## here below how to draw a diagonal line:
abline(a=0, b=1, col="blue") # this will draw the 45 degree angle line (will be shown in blue)
# the formula of the plotted line is y=a+bx so a is intercept and b the slope
reg1 <- lm(y~x) # this computes the linear regression of you data
abline(reg1, col="darkgreen") # and plot the regression line (in green)
## here below how to compute mean (or median) of a gated population
# example1: I will call pop1 the population below the blue diagonal line
ix_pop1<-which(y<x) # if you whant the population above just change to y>x instead of y<x
# this gives you the index of the points that follow your rule
points(x[ix_pop1],y[ix_pop1], pch=20, col="dodgerblue3") # the selected points will be plotted in light blue
x_m<-mean(x[ix_pop1]) # or median(x[ix_pop1]) for the median
y_m<-mean(y[ix_pop1])# or median(y[ix_pop1]) for the median
# example2: I will call pop2 the population above the regression line
a_reg<-coef(reg1)[1] #this is to derive the coefficient a of the regression line (computed before)
b_reg<-coef(reg1)[2] #and this is to derive the coefficient b of the regression line (computed before)
ix_pop2<-which(y>(a_reg+b_reg*x)) # if you whant the population above just change to y>x instead of y<x
# this gives you the index of the points that follow your rule
points(x[ix_pop2],y[ix_pop2], pch=20, col="darkolivegreen3") # the selected points will be plotted in light blue
abline(v=0.1, col="red")
abline(v=0.01, col="red")
abline(v=0.001, col="red")
ix_pop3<-which(y<x & x>0.001) # if you whant the population below just change > to <
points(x[ix_pop1],y[ix_pop1], pch=20, col="deepskyblue") # the selected points will be plotted in light blue
points(x[ix_pop3],y[ix_pop3], pch=20, col="dodgerblue3") # the selected points will be plotted in light blue
load("/Users/eduati/Documents/EIPODproject/11_dataAnalysis/BxPC3_finalDrugs/allData_BxPC3.RData")
BxPC3<-allData
rm(allData)
load("/Users/eduati/Documents/EIPODproject/11_dataAnalysis/AsPC1_finalDrugs/allData_AsPC1.RData")
AsPC1<-allData
rm(allData)
BxPC3_zscore<-scale(BxPC3, center = T, scale = T)
AsPC1_zscore<-scale(AsPC1, center = T, scale = T)
# drugsNames_d1<-c("PHT-427", "MK-2206")
# drugsNames<-c("PHT-427", "Cyt387")
# drugsNames<-c("AZD6244", "Gefitinib")
# drugsNames_d2<-c("ACHP", "Gefitinib")
# drugsNames<-c("MK-2206", "Cyt387")
drugsNames<-c("ACHP", "Gefitinib")
# drugsNames<-c("PHT-427", "MK-2206")
source("/Users/eduati/Documents/EIPODproject/11_dataAnalysis/forBoxplot.R")
# allData.df_BxPC3_d1<-forBoxplot(allData=BxPC3_zscore, cellLine="BxPC3", controlName="11:FS_12:FS", drugsNames=drugsNames_d1)
# allData.df_AsPC1_d1<-forBoxplot(allData=AsPC1_zscore, cellLine="AsPC1", controlName="11:FS_12:FS", drugsNames=drugsNames_d1)
allData.df_BxPC3<-forBoxplot(allData=BxPC3_zscore, cellLine="BxPC3", controlName="11:FS_12:FS", drugsNames=drugsNames)
allData.df_AsPC1<-forBoxplot(allData=AsPC1_zscore, cellLine="AsPC1", controlName="11:FS_12:FS", drugsNames=drugsNames)
allData.df<-rbind(allData.df_AsPC1, allData.df_BxPC3)
aa<-subset(allData.df_BxPC3, name=="FS + ACHP")
t.test(aa$values, mu=0, alternative = c("greater"))
cohensD(aa$values, mu=0)
# wilcox.test(aa$values, mu=0, alternative = c("greater"))
aa<-subset(allData.df_BxPC3, name=="FS + Gefitinib")
t.test(aa$values, mu=0, alternative = c("greater"))
cohensD(aa$values, mu=0)
# wilcox.test(aa$values, mu=0, alternative = c("greater"))
aa<-subset(allData.df_BxPC3, name=="ACHP + Gefitinib")
# aa<-subset(allData.df_BxPC3, name=="PHT-427 + MK-2206")
t.test(aa$values, mu=0, alternative = c("greater"))
cohensD(aa$values, mu=0)
library(lsr)
aa<-subset(allData.df_BxPC3, name=="FS + ACHP")
t.test(aa$values, mu=0, alternative = c("greater"))
cohensD(aa$values, mu=0)
# wilcox.test(aa$values, mu=0, alternative = c("greater"))
aa<-subset(allData.df_BxPC3, name=="ACHP + Gefitinib")
# aa<-subset(allData.df_BxPC3, name=="PHT-427 + MK-2206")
t.test(aa$values, mu=0, alternative = c("greater"))
cohensD(aa$values, mu=0)
# wilcox.test(aa$values, mu=0, alternative = c("greater"))
aa<-subset(allData.df_AsPC1, name=="ACHP + Gefitinib")
t.test(aa$values, mu=0, alternative = c("greater"))
cohensD(aa$values, mu=0)
# wilcox.test(aa$values, mu=0, alternative = c("greater"))
aa<-subset(allData.df_BxPC3, name=="ACHP + Gefitinib")
# aa<-subset(allData.df_BxPC3, name=="PHT-427 + MK-2206")
t.test(aa$values, mu=0, alternative = c("greater"))
cohensD(aa$values, mu=0)
# wilcox.test(aa$values, mu=0, alternative = c("greater"))
median(aa)
median(aa$values)
median(aa$values, na.rm = T)
load("/Users/eduati/Documents/EIPODproject/11_dataAnalysis/BxPC3_finalDrugs/allData_BxPC3.RData")
BxPC3<-allData
rm(allData)
load("/Users/eduati/Documents/EIPODproject/11_dataAnalysis/AsPC1_finalDrugs/allData_AsPC1.RData")
AsPC1<-allData
rm(allData)
BxPC3_zscore<-scale(BxPC3, center = T, scale = T)
AsPC1_zscore<-scale(AsPC1, center = T, scale = T)
# drugsNames_d1<-c("PHT-427", "MK-2206")
# drugsNames<-c("PHT-427", "Cyt387")
# drugsNames<-c("AZD6244", "Gefitinib")
# drugsNames_d2<-c("ACHP", "Gefitinib")
# drugsNames<-c("MK-2206", "Cyt387")
# drugsNames<-c("ACHP", "Gefitinib")
drugsNames<-c("PHT-427", "MK-2206")
source("/Users/eduati/Documents/EIPODproject/11_dataAnalysis/forBoxplot.R")
# allData.df_BxPC3_d1<-forBoxplot(allData=BxPC3_zscore, cellLine="BxPC3", controlName="11:FS_12:FS", drugsNames=drugsNames_d1)
# allData.df_AsPC1_d1<-forBoxplot(allData=AsPC1_zscore, cellLine="AsPC1", controlName="11:FS_12:FS", drugsNames=drugsNames_d1)
#
# allData.df_BxPC3_d2<-forBoxplot(allData=BxPC3_zscore, cellLine="BxPC3", controlName="11:FS_12:FS", drugsNames=drugsNames_d2)
# allData.df_AsPC1_d2<-forBoxplot(allData=AsPC1_zscore, cellLine="AsPC1", controlName="11:FS_12:FS", drugsNames=drugsNames_d2)
# allData.df<-rbind(allData.df_BxPC3, allData.df_AsPC1)
# allData.df<-rbind(allData.df_AsPC1_d1, allData.df_BxPC3_d1,
#                   allData.df_AsPC1_d2, allData.df_BxPC3_d2)
allData.df_BxPC3<-forBoxplot(allData=BxPC3_zscore, cellLine="BxPC3", controlName="11:FS_12:FS", drugsNames=drugsNames)
allData.df_AsPC1<-forBoxplot(allData=AsPC1_zscore, cellLine="AsPC1", controlName="11:FS_12:FS", drugsNames=drugsNames)
allData.df<-rbind(allData.df_AsPC1, allData.df_BxPC3)
aa<-subset(allData.df_BxPC3, name=="PHT-427 + MK-2206")
# aa<-subset(allData.df_BxPC3, name=="PHT-427 + MK-2206")
t.test(aa$values, mu=0, alternative = c("greater"))
cohensD(aa$values, mu=0)
median(aa$values, na.rm = T)
load("/Users/eduati/Documents/EIPODproject/apoptosis_models/cluster/results/r_optODE_ANDgate_predictions/BxPC3/BxPC3_rep1.RData")
opt_pars$parValues
ix<-which(cnolist$namesCues %in% c("EGFR",  "AktP", "PDPK1") ==T)
ix_sample<-which(apply(cnolist$valueCues[,ix],1,sum) == 3)
nrow(cnolist$valueCues)==nrow(simulatedData[[2]])
simulatedData[[2]][ix_sample]
ix_sample
MIDAS_fileName<-"/Users/eduati/Documents/EIPODproject/apoptosis_models/predictions/MIDAS_general.csv"
Mydata<-readMIDAS(MIDASfile=MIDAS_fileName)
library(CellNOptR)
Mydata<-readMIDAS(MIDASfile=MIDAS_fileName)
cnolist_pred<-makeCNOlist(Mydata, subfield=F)
ix<-which(cnolist_pred$namesCues %in% c("EGFR",  "AktP", "PDPK1") ==T)
ix_sample<-which(apply(cnolist_pred$valueCues[,ix],1,sum) == 3)
nrow(cnolist$valueCues)==nrow(simulatedData[[2]])
nrow(cnolist_pred$valueCues)==nrow(simulatedData[[2]])
ix<-which(cnolist_pred$namesCues %in% c("EGFR",  "AktP", "PDPK1") ==T)
ix_sample<-which(apply(cnolist_pred$valueCues[,ix],1,sum) == 3)
ix
ix_sample
nrow(cnolist_pred$valueCues)==nrow(simulatedData[[2]])
simulatedData[[2]][ix_sample]
library(CellNOptR)
MIDAS_fileName<-"/Users/eduati/Documents/EIPODproject/apoptosis_models/predictions/MIDAS_general.csv"
Mydata<-readMIDAS(MIDASfile=MIDAS_fileName)
cnolist_pred<-makeCNOlist(Mydata, subfield=F)
load(x)
ix<-which(cnolist_pred$namesCues %in% c("EGFR",  "AktP", "PDPK1") ==T)
ix_sample<-which(apply(cnolist_pred$valueCues[,ix],1,sum) == 3)
ix_sample
name <- 'vmstat_webserver01.20130102'
gsub('.*_(.*)\\..*', '\\1', name)
gsub('.+_(.+)\\..+', '\\1', name)
strings<-c(n1, n2, n3, n4)
n1<-"L5-D2-S"
n2<-"L5-D1-S"
n3<-"A32-S"
n4<-"A31-C"
strings<-c(n1, n2, n3, n4)
strings
grep('A.*', )
grep('A.*', strings)
grep('L.*', strings)
grep('.*S', strings)
grep('.*C', strings)
gsub('(.*)_(.*)\\..*', '\\1', name)
gsub('(.*)_(.*)\\..*', '\\2', name)
x<-seq(0, 1, 0.01)
n<-3
k<-0.5
y<-(x^n/(x^n+k^n))/(1/1+k)
plot(x,y)
y<-(x^n/(x^n+k^n))
plot(x,y)
x<-seq(0, 1, 0.01)
n<-3
k<-0.5
y<-(x^n/(x^n+k^n))/(1/1+k)
# y<-(x^n/(x^n+k^n))
plot(x,y)
fy<-function(k){(x^n/(x^n+k^n))/(1/1+k)}
f<-function(k){(x^n/(x^n+k^n))/(1/1+k)}
y<-f(0.5)
plot(x,y)
x<-seq(0, 1, 0.01)
n<-3
k<-0.5
f<-function(k){(x^n/(x^n+k^n))/(1/1+k)}
# y<-(x^n/(x^n+k^n))
y<-f(0.5)
plot(x,y)
y1<-f(0.5)
plot(x,y1)
y2<-f(1)
points()
plot(x,y1, xlim=c(0,1), ylim=c(0,1))
y2<-f(1)
points(x,y)
y2<-f(1)
plot(x,y)
y2<-f(1)
plot(x,y2)
y2<-f(0)
plot(x,y2)
y2<-f(Inf)
plot(x,y2)
y3<-f(1)
plot(x,y3)
f<-function(k){(x^n/(x^n+k^n))/(1/(1+k))}
y3<-f(1)
plot(x,y3)
y1<-f(0.5)
plot(x,y1, xlim=c(0,1), ylim=c(0,1))
y1<-f(0)
plot(x,y1, xlim=c(0,1), ylim=c(0,1))
y2<-f(Inf)
plot(x,y2)
plot(x,y2, xlim=c(0,1), ylim=c(0,1))
y2
y3<-f(1)
plot(x,y3)
y3<-f(6)
plot(x,y3)
y3<-f(1)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(10)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(5)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(2)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(1.5)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(2)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(3)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(4)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(5)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(6)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(7)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
y3<-f(10)
plot(x,y3, xlim=c(0,1), ylim=c(0,1))
library(BraDiPluS)
# source("/Users/eduati/Dropbox/EIPODproject/BraDiPluS/R/plotData.R")
setwd("/Users/eduati/Documents/EIPODproject/10_visitWinter2016/160226_BxPC3_microfluidics/")
MyData<-read.table("data/BxPCtube_1.txt", header=FALSE, skip=22, dec=".")
library(BraDiPluS)
# source("/Users/eduati/Dropbox/EIPODproject/BraDiPluS/R/plotData.R")
setwd("/Users/eduati/Documents/EIPODproject/10_visitWinter2016/160226_BxPC3_microfluidics/")
MyData<-read.table("data/BxPCtube_1.txt", header=FALSE, skip=22, dec=".")
MyData<-MyData[,-1]
names(MyData)<-c("green", "orange", "blue")
FrameRate <- 300 #depending on the FrameRate used for acquisition
MyData$time <- seq(from=0, by=1/FrameRate, length.out=nrow(MyData))
MyData_3<-cutData(data=MyData, startTime = 5090, endTime = 7800)
MyData<-MyData_3
setwd("/Users/eduati/BraDiPluS/data/BxPC3_data.RData")
setwd("/Users/eduati/BraDiPluS/data/")
save(MyData, file = "BxPC3_data.RData")
load("/Users/eduati/BraDiPluS/data/BxPC3_data.RData")
detach("package:BraDiPluS", unload=TRUE)
plotData(data=MyData, channels=c("blue", "orange", "green"))
file.sources = list.files(path = "/Users/eduati/BraDiPluS/R/", pattern="*.R")
sapply(data.sources,source,.GlobalEnv)
file.sources = list.files(path = "/Users/eduati/BraDiPluS/R/", pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
file.sources
setwd("/Users/eduati/BraDiPluS/R/")
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd("/Users/eduati/BraDiPluS/data/")
load("BxPC3_data.RData")
plotData(data=MyData, channels=c("blue", "orange", "green"))
setwd("/Users/eduati/BraDiPluS/R/")
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
# select the different samples (separated by barcode)
res <- samplesSelection(data=MyData, BCchannel="blue",BCthr=0.01, BCminLength=100, distThr=16, plotMyData=T, barcodePos="before")
setwd("/Users/eduati/BraDiPluS/R/")
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd("/Users/eduati/BraDiPluS/data/")
load("BxPC3_data.RData")
# plot the data
plotData(data=MyData, channels=c("blue", "orange", "green"))
# separate the different samples (separated by barcode)
res <- samplesSelection(data=MyData, BCchannel="blue",BCthr=0.01, BCminLength=100, distThr=16, plotMyData=F, barcodePos="before")
samples<-res$samples
plotData(data=MyData, channels=c("blue", "orange", "green"), samples = samples)
res <- samplesSelection(data=MyData, BCchannel="blue",BCthr=0.01, BCminLength=100, distThr=16, plotMyData=F, barcodePos="before")
samples<-res$samples
setwd("/Users/eduati/BraDiPluS/R/")
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd("/Users/eduati/BraDiPluS/data/")
load("BxPC3_data.RData")
# separate the different samples (separated by barcode)
res <- samplesSelection(data=MyData, BCchannel="blue",BCthr=0.01, BCminLength=100, distThr=16, plotMyData=F, barcodePos="before")
samples<-res$samples
samplesPeaks <- selectSamplesPeaks(samples, channel="green", metric="median", baseThr=0.01, minLength=350, discartPeaks="first", discartPeaksPerc=5)
runs<-list(run1=samplesPeaks)
runs.qa<-qualityAssessment(runs=runs)
setwd("/Users/eduati/BraDiPluS/R/")
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
runs<-list(run1=samplesPeaks)
runs.qa<-qualityAssessment(runs=runs)
library(BraDiPluS)
# source("/Users/eduati/Dropbox/EIPODproject/BraDiPluS/R/plotData.R")
setwd("/Users/eduati/Documents/EIPODproject/10_visitWinter2016/160226_BxPC3_microfluidics/")
MyData<-read.table("data/BxPCtube_1.txt", header=FALSE, skip=22, dec=".")
MyData<-MyData[,-1]
names(MyData)<-c("green", "orange", "blue")
FrameRate <- 300 #depending on the FrameRate used for acquisition
MyData$time <- seq(from=0, by=1/FrameRate, length.out=nrow(MyData))
inletsNames<-read.csv("/Users/eduati/Documents/EIPODproject/8_visitFall2015/151125_Pancreas/inletsName_151125.csv", header=F, stringsAsFactor=F)
inletsNames.p<-paste(inletsNames$V1, inletsNames$V2, sep=":")
names(inletsNames.p)<-inletsNames$V1
BD_sequence<-read.csv("/Users/eduati/Documents/EIPODproject/8_visitFall2015/151104_Pancreas/experiments_151104.csv", header=F, stringsAsFactor=F)
BD_sequence_names<-paste(inletsNames.p[as.character(BD_sequence$V6)], inletsNames.p[as.character(BD_sequence$V7)], sep="_")
BD_sequence_names<-BD_sequence_names[2:63]
sampleNames<-BD_sequence_names
sampleNames<-gsub(" ", "", sampleNames)
setwd("/Users/eduati/BraDiPluS/data/")
save(sampleNames, file = "sampleNames.RData")
res <- samplesSelection(data=MyData, BCchannel="blue",BCthr=0.01, BCminLength=100, distThr=16, plotMyData=F, barcodePos="before")
samples<-res$samples
names(samples)<-sampleNames
setwd("/Users/eduati/BraDiPluS/R/")
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd("/Users/eduati/BraDiPluS/data/")
load("BxPC3_data.RData")
load("sampleNames.RData")
# plot the data
plotData(data=MyData, channels=c("blue", "orange", "green"))
# separate the different samples (separated by barcode)
res <- samplesSelection(data=MyData, BCchannel="blue",BCthr=0.01, BCminLength=100, distThr=16, plotMyData=F, barcodePos="before")
samples<-res$samples
names(samples)<-sampleNames
samplesPeaks <- selectSamplesPeaks(samples, channel="green", metric="median", baseThr=0.01, minLength=350, discartPeaks="first", discartPeaksPerc=5)
runs<-list(run1=samplesPeaks)
runs.qa<-qualityAssessment(runs=runs)
allData<-do.call(cbind, lapply(runs.qa, function(myRun){
sapply(sapply(myRun, get, x="green"), median)
}))
allData_scale<-apply(allData,2,scale)
setwd("/Users/eduati/BraDiPluS/R/")
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd("/Users/eduati/BraDiPluS/data/")
load("BxPC3_data.RData")
load("sampleNames.RData")
# plot the data
plotData(data=MyData, channels=c("blue", "orange", "green"))
# separate the different samples (separated by barcode)
res <- samplesSelection(data=MyData, BCchannel="blue",BCthr=0.01, BCminLength=100, distThr=16, plotMyData=F, barcodePos="before")
samples<-res$samples
names(samples)<-sampleNames
p
plotData(data=MyData, channels=c("blue", "orange", "green"), samples = samples)
samplesPeaks <- selectSamplesPeaks(samples, channel="green", metric="median", baseThr=0.01, minLength=350, discartPeaks="first", discartPeaksPerc=5)
runs<-list(run1=samplesPeaks)
runs.qa<-qualityAssessment(runs=runs)
plotData(data=samples[[1]], channels=c("blue", "orange", "green"), peaks = samplesPeaks[[1]])
plotData(data=samples[[3]], channels=c("blue", "orange", "green"), peaks = samplesPeaks[[£]])
plotData(data=samples[[3]], channels=c("blue", "orange", "green"), peaks = samplesPeaks[[3]])
